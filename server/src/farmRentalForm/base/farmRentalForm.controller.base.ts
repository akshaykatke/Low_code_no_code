/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FarmRentalFormService } from "../farmRentalForm.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FarmRentalFormCreateInput } from "./FarmRentalFormCreateInput";
import { FarmRentalFormWhereInput } from "./FarmRentalFormWhereInput";
import { FarmRentalFormWhereUniqueInput } from "./FarmRentalFormWhereUniqueInput";
import { FarmRentalFormFindManyArgs } from "./FarmRentalFormFindManyArgs";
import { FarmRentalFormUpdateInput } from "./FarmRentalFormUpdateInput";
import { FarmRentalForm } from "./FarmRentalForm";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FarmRentalFormControllerBase {
  constructor(
    protected readonly service: FarmRentalFormService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FarmRentalForm })
  @nestAccessControl.UseRoles({
    resource: "FarmRentalForm",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(
    @common.Body() data: FarmRentalFormCreateInput
  ): Promise<FarmRentalForm> {
    return await this.service.create({
      data: data,
      select: {
        caste: true,
        crop: true,
        currentAddress: true,
        dateOfBirth: true,
        district: true,
        firstNameOfFarmer: true,
        firstNameOfFather: true,
        firstNameOfMother: true,
        fromDate: true,
        gender: true,
        id: true,
        landmark: true,
        lastNameOfFarmer: true,
        lastNameOfFather: true,
        lastNameOfMother: true,
        maritalStatus: true,
        mobileNumber: true,
        mobileNumberSameAsWhatsappNumber: true,
        permanentAddressSameAsCurrentAddress: true,
        pinCode: true,
        religion: true,
        state: true,
        tehsil: true,
        title: true,
        toDate: true,
        whatsappNumber: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [FarmRentalForm] })
  @ApiNestedQuery(FarmRentalFormFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FarmRentalForm",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<FarmRentalForm[]> {
    const args = plainToClass(FarmRentalFormFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        caste: true,
        crop: true,
        currentAddress: true,
        dateOfBirth: true,
        district: true,
        firstNameOfFarmer: true,
        firstNameOfFather: true,
        firstNameOfMother: true,
        fromDate: true,
        gender: true,
        id: true,
        landmark: true,
        lastNameOfFarmer: true,
        lastNameOfFather: true,
        lastNameOfMother: true,
        maritalStatus: true,
        mobileNumber: true,
        mobileNumberSameAsWhatsappNumber: true,
        permanentAddressSameAsCurrentAddress: true,
        pinCode: true,
        religion: true,
        state: true,
        tehsil: true,
        title: true,
        toDate: true,
        whatsappNumber: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FarmRentalForm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FarmRentalForm",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: FarmRentalFormWhereUniqueInput
  ): Promise<FarmRentalForm | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        caste: true,
        crop: true,
        currentAddress: true,
        dateOfBirth: true,
        district: true,
        firstNameOfFarmer: true,
        firstNameOfFather: true,
        firstNameOfMother: true,
        fromDate: true,
        gender: true,
        id: true,
        landmark: true,
        lastNameOfFarmer: true,
        lastNameOfFather: true,
        lastNameOfMother: true,
        maritalStatus: true,
        mobileNumber: true,
        mobileNumberSameAsWhatsappNumber: true,
        permanentAddressSameAsCurrentAddress: true,
        pinCode: true,
        religion: true,
        state: true,
        tehsil: true,
        title: true,
        toDate: true,
        whatsappNumber: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FarmRentalForm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FarmRentalForm",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: FarmRentalFormWhereUniqueInput,
    @common.Body() data: FarmRentalFormUpdateInput
  ): Promise<FarmRentalForm | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          caste: true,
          crop: true,
          currentAddress: true,
          dateOfBirth: true,
          district: true,
          firstNameOfFarmer: true,
          firstNameOfFather: true,
          firstNameOfMother: true,
          fromDate: true,
          gender: true,
          id: true,
          landmark: true,
          lastNameOfFarmer: true,
          lastNameOfFather: true,
          lastNameOfMother: true,
          maritalStatus: true,
          mobileNumber: true,
          mobileNumberSameAsWhatsappNumber: true,
          permanentAddressSameAsCurrentAddress: true,
          pinCode: true,
          religion: true,
          state: true,
          tehsil: true,
          title: true,
          toDate: true,
          whatsappNumber: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FarmRentalForm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FarmRentalForm",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: FarmRentalFormWhereUniqueInput
  ): Promise<FarmRentalForm | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          caste: true,
          crop: true,
          currentAddress: true,
          dateOfBirth: true,
          district: true,
          firstNameOfFarmer: true,
          firstNameOfFather: true,
          firstNameOfMother: true,
          fromDate: true,
          gender: true,
          id: true,
          landmark: true,
          lastNameOfFarmer: true,
          lastNameOfFather: true,
          lastNameOfMother: true,
          maritalStatus: true,
          mobileNumber: true,
          mobileNumberSameAsWhatsappNumber: true,
          permanentAddressSameAsCurrentAddress: true,
          pinCode: true,
          religion: true,
          state: true,
          tehsil: true,
          title: true,
          toDate: true,
          whatsappNumber: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
